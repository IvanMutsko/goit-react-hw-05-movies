{"version":3,"file":"static/js/359.56dc3325.chunk.js","mappings":"+SAEMA,EAAU,gCACVC,EAAU,mCAEHC,EAAgB,mCAAG,+GAELC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,sCACmBC,IAHd,uBAEpBG,EAFoB,EAEpBA,KAFoB,kBAKrBA,GALqB,sCAOtB,IAAIC,MAAJ,MAPsB,yDAAH,qDAWhBC,EAAiB,mCAAG,WAAMC,GAAN,kGAENJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACcC,EADd,iCAC8CM,EAD9C,gCAFM,uBAErBH,EAFqB,EAErBA,KAFqB,kBAMtBA,GANsB,sCAQvB,IAAIC,MAAJ,MARuB,yDAAH,sDAYjBG,EAAc,mCAAG,WAAMC,GAAN,kGAEHN,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACFS,EADE,oBACiBR,EADjB,oBAFG,uBAElBG,EAFkB,EAElBA,KAFkB,kBAKnBA,GALmB,sCAOpB,IAAIC,MAAJ,MAPoB,yDAAH,sDAWdK,EAAiB,mCAAG,WAAMD,GAAN,kGAENN,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACFS,EADE,4BACyBR,EADzB,oBAFM,uBAErBG,EAFqB,EAErBA,KAFqB,kBAKtBA,GALsB,sCAOvB,IAAIC,MAAJ,MAPuB,yDAAH,sDAWjBM,EAAiB,mCAAG,WAAMF,GAAN,kGAENN,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACFS,EADE,4BACyBR,EADzB,oBAFM,uBAErBG,EAFqB,EAErBA,KAFqB,kBAKtBA,GALsB,sCAOvB,IAAIC,MAAJ,MAPuB,yDAAH,qD,mJChDjBO,EAAUC,EAAAA,GAAAA,QAAH,4GAQPC,EAAYD,EAAAA,GAAAA,IAAH,kH,2BC+CtB,EAnDa,WAAO,IAAD,EACTJ,GAAYM,EAAAA,EAAAA,MAAZN,QACR,GAAwCO,EAAAA,EAAAA,UAAS,CAAC,GAAlD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,oGAEnBF,GAAS,GACTF,GAAa,GAHM,UAIOV,EAAAA,EAAAA,IAAkBD,GAJzB,OAIbgB,EAJa,OAKnBP,EAAgBO,GALG,gDAOnBH,GAAS,GAPU,yBASnBF,GAAa,GATM,4EAAH,qDAYpBI,GACD,GAAE,CAACf,KAGF,UAACG,EAAD,WACGS,GAAQ,0EAA0D,KAElEF,GAAY,SAACO,EAAA,EAAD,IAAa,KAH5B,UAKGT,EAAaU,YALhB,aAKG,EAAmBC,KAAI,SAAAC,GACtB,OACE,UAACf,EAAD,WACGe,EAAMC,cACL,gBACEC,IAAG,yCAAoCF,EAAMC,cAC7CE,IAAG,UAAKH,EAAMI,SAGhB,gBACEF,IAAG,oDACHC,IAAG,UAAKH,EAAMI,KAAX,eAGP,8BAAMJ,EAAMI,SACZ,uCAAeJ,EAAMK,eAbPL,EAAMM,UAgBzB,MAGN,C","sources":["api/api.js","components/MovieDetails/Cast/Cast.styled.jsx","components/MovieDetails/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'bc10706c6695cbc040a40fff81bfdeeb';\n\nexport const fetchTrendMovies = async () => {\n  try {\n    const { data } = await axios.get(\n      `${API_URL}/trending/all/week?api_key=${API_KEY}`\n    );\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const fetchMoviesByName = async searchQuery => {\n  try {\n    const { data } = await axios.get(\n      `${API_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&page=1&include_adult=false`\n    );\n\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const fetchMovieById = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `${API_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const fetchMovieCredits = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const fetchMovieReviews = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `${API_URL}movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n","import styled from 'styled-components';\n\nexport const Section = styled.section`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 30px;\n  justify-content: center;\n  \n`;\n\nexport const ActorWrap = styled.div`\n  max-width: 320px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ActorWrap, Section } from './Cast.styled';\nimport { fetchMovieCredits } from '../../../api/api';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [movieCredits, setMovieCredits] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    const fetchMovieData = async () => {\n      try {\n        setError(false);\n        setIsLoading(true);\n        const fetchedData = await fetchMovieCredits(movieId);\n        setMovieCredits(fetchedData);\n      } catch (error) {\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMovieData();\n  }, [movieId]);\n\n  return (\n    <Section>\n      {error ? <div>An error occurred, please try again later...</div> : null}\n\n      {isLoading ? <Loader /> : null}\n\n      {movieCredits.cast?.map(actor => {\n        return (\n          <ActorWrap key={actor.credit_id}>\n            {actor.profile_path ? (\n              <img\n                src={`https://image.tmdb.org/t/p/w200${actor.profile_path}`}\n                alt={`${actor.name}`}\n              />\n            ) : (\n              <img\n                src={`https://via.placeholder.com/200x300?text=No+Image`}\n                alt={`${actor.name} profile`}\n              />\n            )}\n            <h3> {actor.name}</h3>\n            <p>Character: {actor.character}</p>\n          </ActorWrap>\n        );\n      })}\n    </Section>\n  );\n};\n\nexport default Cast;\n"],"names":["API_URL","API_KEY","fetchTrendMovies","axios","data","Error","fetchMoviesByName","searchQuery","fetchMovieById","movieId","fetchMovieCredits","fetchMovieReviews","Section","styled","ActorWrap","useParams","useState","movieCredits","setMovieCredits","isLoading","setIsLoading","error","setError","useEffect","fetchMovieData","fetchedData","Loader","cast","map","actor","profile_path","src","alt","name","character","credit_id"],"sourceRoot":""}