{"version":3,"file":"static/js/640.8443255a.chunk.js","mappings":"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","sources":["api/api.js","components/MovieList/MovieList.styled.jsx","components/MovieList/MovieList.jsx","components/Searchbar/Searchbar.styled.jsx","components/Searchbar/Searchbar.jsx","pages/MoviesPage/MoviesPage.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'bc10706c6695cbc040a40fff81bfdeeb';\n\nexport const fetchTrendMovies = async () => {\n  try {\n    const { data } = await axios.get(\n      `${API_URL}/trending/all/week?api_key=${API_KEY}`\n    );\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const fetchMoviesByName = async searchQuery => {\n  try {\n    const { data } = await axios.get(\n      `${API_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&page=1&include_adult=false`\n    );\n\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const fetchMovieById = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `${API_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const fetchMovieCredits = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const fetchMovieReviews = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `${API_URL}movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const MoviesList = styled.ul`\n  list-style: none;\n\n  padding: 0;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 30px;\n`;\n\nexport const MovieItem = styled.li`\n  display: flex;\n  width: 240px;\n\n  background-color: #00000039;\n\n  box-shadow: 0px 4px 10px 1px rgba(0, 0, 0, 0.76);\n  transition: all 0.3s ease-in-out;\n  &:hover {\n    transform: scale(1.05);\n  }\n`;\n\nexport const MovieLink = styled(NavLink)`\n  color: #000000;\n  text-decoration: none;\n  font-size: 18px;\n  font-weight: 500;\n`;\n\nexport const TextWrap = styled.div`\n  padding: 10px;\n  text-align: center;\n`;\n","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport { MoviesList, MovieItem, MovieLink, TextWrap } from './MovieList.styled';\n\nexport const Movies = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <MoviesList>\n      {movies.map(movie => {\n        const posterURL = movie.poster_path\n          ? `https://image.tmdb.org/t/p/w400/${movie.poster_path}`\n          : 'https://via.placeholder.com/400x600.png?text=Poster+Not+Available';\n\n        return (\n          <MovieItem key={movie.id}>\n            <MovieLink to={`/movies/${movie.id}`} state={{ from: location }}>\n              <img src={posterURL} alt={movie.original_title} width=\"240\" />\n              <TextWrap>{movie.title ?? movie.name}</TextWrap>\n            </MovieLink>\n          </MovieItem>\n        );\n      })}\n    </MoviesList>\n  );\n};\n\nMovies.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string,\n      name: PropTypes.string,\n    })\n  ).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const SearchbarBox = styled.header`\n  top: 0;\n  left: 0;\n  position: sticky;\n  z-index: 1100;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 64px;\n  padding-right: 24px;\n  padding-left: 24px;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  color: #fff;\n  background-color: #ff44007a;\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`;\n\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n`;\n\nexport const SearchFormButton = styled.button`\n  display: inline-block;\n  font-weight: 700;\n  color: #000;\n  font-size: 16px;\n  width: 90px;\n  height: 42px;\n  border: 0;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const SearchFormInput = styled.input`\n  display: inline-block;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n  width: 100%;\n\n  &::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n","import PropTypes from 'prop-types';\n\nimport {\n  SearchbarBox,\n  SearchForm,\n  SearchFormButton,\n  SearchFormInput,\n} from './Searchbar.styled';\n\nexport const Searchbar = ({ onSubmitForm }) => {\n  const onSearch = evt => {\n    evt.preventDefault();\n\n    const query = evt.target.searchQuery.value;\n\n    onSubmitForm(query);\n    evt.target.reset();\n  };\n\n  return (\n    <SearchbarBox>\n      <SearchForm onSubmit={onSearch}>\n        <SearchFormButton type=\"submit\">Search</SearchFormButton>\n\n        <SearchFormInput\n          id=\"searchQuery\"\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies...\"\n        />\n      </SearchForm>\n    </SearchbarBox>\n  );\n};\n\nSearchbar.propTypes = { onSubmitForm: PropTypes.func.isRequired };\n","import { Searchbar } from 'components/Searchbar/Searchbar';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchMoviesByName } from '../../api/api';\nimport { Movies } from 'components/MovieList/MovieList';\nimport { Loader } from 'components/Loader/Loader';\n\nconst MoviesPage = () => {\n  const [searchedMovies, setSearchedMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  useEffect(() => {\n    const query = searchParams.get('query') ?? '';\n    if (!query) return;\n\n    const fetchMovies = async () => {\n      try {\n        setError(false);\n        setIsLoading(true);\n\n        const { results } = await fetchMoviesByName(query);\n\n        if (results.length === 0) {\n          alert('No movies found');\n          setSearchedMovies([]);\n        } else {\n          setSearchedMovies(results);\n        }\n      } catch (error) {\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMovies();\n  }, [searchParams]);\n\n  return (\n    <>\n      <Searchbar onSubmitForm={query => setSearchParams({ query })} />\n\n      {error ? <div>An error occurred, please try again later...</div> : null}\n\n      {isLoading ? <Loader /> : <Movies movies={searchedMovies} />}\n    </>\n  );\n};\n\nexport default MoviesPage;\n"],"names":["API_URL","API_KEY","fetchTrendMovies","axios","data","Error","fetchMoviesByName","searchQuery","fetchMovieById","movieId","fetchMovieCredits","fetchMovieReviews","MoviesList","styled","MovieItem","MovieLink","NavLink","TextWrap","Movies","movies","location","useLocation","map","movie","posterURL","poster_path","to","id","state","from","src","alt","original_title","width","title","name","SearchbarBox","SearchForm","SearchFormButton","SearchFormInput","Searchbar","onSubmitForm","onSubmit","evt","preventDefault","query","target","value","reset","type","autoComplete","autoFocus","placeholder","useState","searchedMovies","setSearchedMovies","isLoading","setIsLoading","error","setError","useSearchParams","searchParams","setSearchParams","useEffect","get","fetchMovies","results","length","alert","Loader"],"sourceRoot":""}